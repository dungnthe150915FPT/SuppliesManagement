@page
@using SuppliesManagement.Models.Request
@model SuppliesManagement.Pages.NhapMuaHangHoaModel
@{
    //ViewData["Title"] = "Nhập Mua Hàng Hóa";
    //var success = ViewData["Success"]?.ToString();
    var hangHoaListJson = TempData["HangHoaList"] as string;
    List<HangHoaInputModel> hangHoaList = !string.IsNullOrEmpty(hangHoaListJson)
    ? System.Text.Json.JsonSerializer.Deserialize<List<HangHoaInputModel>>(hangHoaListJson)
    : new List<HangHoaInputModel>();
}
<link href="~/css/nhapmuahanghoa.css" rel="stylesheet" />
<h2>Nhập Mua Hàng Hóa</h2>
    <div class="video-container">
        <iframe 
        style="display: none;" 
            src="https://www.youtube.com/embed/D7IdVRly8AM?autoplay=1" 
            title="YouTube video player" 
            frameborder="0" 
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
            allowfullscreen>
        </iframe>
    </div>
@*<a href="./ImportHoaDonNhap">Import hóa đơn nhập</a>*@

<form asp-page-handler="ImportHoaDon" method="post" enctype="multipart/form-data">
    <div class="form-group">
        <label for="fileXml">Chọn file hóa đơn (XML):</label>
        <input type="file" class="form-control" id="fileXml" name="fileXml" accept=".xml" required>
    </div>
    <button type="submit" class="btn btn-secondary">Import</button>
</form>
<form method="post" enctype="multipart/form-data">
    <div class="form-group">
        <label for="PDFFile">Hóa đơn PDF:</label>
        <input type="file" class="form-control" id="PDFFile" name="PDFFile" accept=".pdf">
    </div>
    <div class="form-group">
        <label for="NhaCungCap">Nhà cung cấp:</label>
        <input type="text" class="form-control" id="NhaCungCap" name="NhaCungCap" value="@TempData["NhaCungCap"]"
            required>
    </div>
    <div class="form-group">
        <label for="NgayNhap">Ngày nhập:</label>
        <input type="date" class="form-control" id="NgayNhap" name="NgayNhap"
            value="@(TempData["NgayNhap"] != null ? DateTime.Parse(TempData["NgayNhap"].ToString()).ToString("yyyy-MM-dd") : "")"
            required>
    </div>
    <div class="form-group">
        <label for="KhoHangID">Nhập vào đơn vị:</label>
        <select class="form-control" name="khoHangID" required>
            @if (Model.KhoHangs != null && Model.KhoHangs.Any())
            {
                foreach (var kho in Model.KhoHangs)
                {
                    <option value="@kho.Id">@kho.Ten - @kho.DiaChi</option>
                }
            }
            else
            {
                <option disabled>Không có dữ liệu kho hàng</option>
            }
        </select>

    </div>
    <div class="form-group">
        <label for="SoSerial">Số Serial:</label>
        <input type="text" class="form-control" id="SoSerial" name="SoSerial" value="@TempData["SoSerial"]">
    </div>
    <div class="form-group">
        <label for="SoHoaDon">Số hóa đơn:</label>
        <input type="text" class="form-control" id="SoHoaDon" name="SoHoaDon" value="@TempData["SoHoaDon"]">
    </div>
    <div class="form-group">
        <label for="ThanhTien">Tổng số tiền (Chưa tính VAT):</label>
        <input type="text" class="form-control" id="ThanhTien" name="ThanhTien" readonly value="@TempData["ThanhTien"]">
    </div>
    <div class="form-group">
        <label for="TongTien">Tổng số tiền (Đã tính VAT):</label>
        <input type="text" class="form-control" id="TongTien" name="TongTien" readonly value="@TempData["TongTien"]">
    </div>
    <br>

    <div class="table-responsive">
        <table class="table custom-table">
            <thead class="thead-dark">
                <tr>
                    <th>Hàng hóa</th>
                    <th>Nhóm hàng hóa</th>
                    <th>Số lượng</th>
                    <th>Đ.vị tính</th>
                    <th>Hình ảnh</th>
                    @* <th>Hình ảnh 2</th>
                    <th>Hình ảnh 3</th> *@
                    <th>Giá tr.thuế</th>
                    <th>VAT%</th>
                    <th>Giá s.thuế</th>
                    <th>Tiền hàng</th>
                    <th>Tổng tiền</th>
                    <th>Đóng</th>
                </tr>
            </thead>
            <tbody id="hangHoaTableBody">
                @for (int i = 0; i < hangHoaList.Count; i++)
                {
                    var hangHoa = hangHoaList[i];
                    <tr>
                        <td>
                            <input type="text" class="form-control" name="hangHoaModels[@i].TenHangHoa"
                                value="@hangHoa.TenHangHoa" required>
                        </td>
                        <td>
                            <select class="form-control" name="hangHoaModels[@i].NhomHangID" required>
                                @if (Model.NhomHangs != null && Model.NhomHangs.Any())
                                {
                                    @foreach (var nhomHang in Model.NhomHangs)
                                    {
                                        <option value="@nhomHang.Id">@nhomHang.Name</option>
                                    }
                                }
                                else
                                {
                                    <option disabled>Không có dữ liệu nhóm hàng</option>
                                }
                            </select>
                        </td>
                        <td>
                            <input type="number" class="form-control" name="hangHoaModels[@i].SoLuong" min="1"
                                value="@hangHoa.SoLuong" required oninput="calculateTotals(this.closest('tr'))">
                        </td>
                        <td>
                            <select class="form-control" name="hangHoaModels[@i].DonViTinhID" required>
                                @if (Model.DonViTinhs != null && Model.DonViTinhs.Any())
                                {
                                    foreach (var donViTinh in Model.DonViTinhs)
                                    {
                                        if (hangHoa.DonViTinhID == donViTinh.Id)
                                        {
                                            <option value="@donViTinh.Id" selected>@donViTinh.Name</option>
                                        }
                                        else if (hangHoa.DonViTinhID != donViTinh.Id)
                                        {
                                            <option value="@donViTinh.Id">@donViTinh.Name</option>
                                        }
                                        else
                                        {
                                            <option value="@donViTinh.Id">@donViTinh.Name</option>
                                        }
                                    }
                                }
                                else
                                {
                                    <option disabled>Không có dữ liệu đơn vị tính</option>
                                }
                            </select>
                        </td>
                        @* <td>
                            <input type="file" class="form-control" name="hangHoaModels[@i].Images" accept="image/*"
                                multiple onchange="validateImages(this, @i)">
                            <div id="imagePreviews_@(i)" class="image-previews">
                            </div>
                        </td> *@
                        <td>
                            <input type="file" class="form-control" name="hangHoaModels[@i].Images" accept="image/*"
                                multiple onchange="validateAndPreviewImages(this, @i)">
                            <div id="imagePreviews_@(i)" class="image-previews"
                                style="display: flex; gap: 5px; margin-top: 10px;">
                            </div>
                        </td>
                        <td>
                            <input type="text" class="form-control" name="hangHoaModels[@i].DonGiaTruocThue"
                                value="@hangHoa.DonGiaTruocThue" min="0" required
                                oninput="calculateTotals(this.closest('tr'))">
                        </td>
                        <td>
                            <input type="number" class="form-control" name="hangHoaModels[@i].VAT" min="0" max="10"
                                value="@hangHoa.VAT" required oninput="calculateTotals(this.closest('tr'))">
                        </td>
                        <td>
                            <input type="text" class="form-control" name="hangHoaModels[@i].DonGiaSauThue"
                                value="@(hangHoa.DonGiaTruocThue + (hangHoa.DonGiaTruocThue * hangHoa.VAT / 100))" readonly>
                        </td>
                        <td>
                            <input type="text" class="form-control" name="hangHoaModels[@i].TongGiaTruocThue"
                                value="@(hangHoa.DonGiaTruocThue * hangHoa.SoLuong)" readonly>
                        </td>
                        <td>
                            <input type="text" class="form-control" name="hangHoaModels[@i].TongGiaSauThue" value="@((hangHoa.DonGiaTruocThue * hangHoa.SoLuong)
+ (hangHoa.DonGiaTruocThue * hangHoa.SoLuong * hangHoa.VAT / 100))" readonly>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button type="button" class="btn btn-secondary" id="addRow">Thêm Hàng Hóa</button>
        <button type="submit" class="btn btn-primary">Lưu thông tin</button>
    </div>
</form>
@if (TempData["SuccessMessage"] != null)
{
    <div id="successAlert" class="alert alert-success" role="alert">
        @TempData["SuccessMessage"]
    </div>
}
@if (TempData["Error"] != null)
{
    <div id="errorAlert" class="alert alert-danger" role="alert">
        @TempData["Error"]
    </div>
}
<script>
    // Initialize row counter based on existing rows
    let hangHoaCount = document.querySelectorAll('#hangHoaTableBody tr').length;

    document.getElementById('addRow').addEventListener('click', function () {
        const tableBody = document.getElementById('hangHoaTableBody');
        const newRow = document.createElement('tr');

        // Dynamically add new row content
        newRow.innerHTML = `
            <td><input type="text" class="form-control" name="hangHoaModels[${hangHoaCount}].TenHangHoa" required></td>
            <td>
                <select class="form-control" name="hangHoaModels[${hangHoaCount}].NhomHangID" required>
    @foreach (var nhomHang in Model.NhomHangs)
    {
                                                                                                                                        <option value="@nhomHang.Id">@nhomHang.Name</option>
    }
                </select>
            </td>
            <td><input type="number" class="form-control" name="hangHoaModels[${hangHoaCount}].SoLuong" min="1" required oninput="calculateTotals(this.closest('tr'))"></td>
            <td>
                <select class="form-control" name="hangHoaModels[${hangHoaCount}].DonViTinhID" required>
    @foreach (var donViTinh in Model.DonViTinhs)
    {
                                                                                                                                        <option value="@donViTinh.Id">@donViTinh.Name</option>
    }
                </select>
            </td>
    @* image *@
    @* <td>
                <input type="file" class="form-control" name="hangHoaModels[${hangHoaCount}].ImageFile" accept="image/*" onchange="previewImage(this, ${hangHoaCount})">
                <img id="imagePreview_${hangHoaCount}" src="#" alt="Preview" style="max-width: 100px; max-height: 100px; display: none;" />
            </td> *@
    @* <td>
                <input type="file" class="form-control" name="hangHoaModels[${hangHoaCount}].ImageFile1" accept="image/*" onchange="previewImage(this, ${hangHoaCount}, 1)">
                <img id="imagePreview_${hangHoaCount}_1" src="#" alt="Preview 1" style="max-width: 100px; max-height: 100px; display: none;" />
            </td>
            <td>
                <input type="file" class="form-control" name="hangHoaModels[${hangHoaCount}].ImageFile2" accept="image/*" onchange="previewImage(this, ${hangHoaCount}, 2)">
                <img id="imagePreview_${hangHoaCount}_2" src="#" alt="Preview 2" style="max-width: 100px; max-height: 100px; display: none;" />
            </td>
            <td>
                <input type="file" class="form-control" name="hangHoaModels[${hangHoaCount}].ImageFile3" accept="image/*" onchange="previewImage(this, ${hangHoaCount}, 3)">
                <img id="imagePreview_${hangHoaCount}_3" src="#" alt="Preview 3" style="max-width: 100px; max-height: 100px; display: none;" />
            </td> *@

<td>
    <input 
        type="file" 
        class="form-control" 
        name="hangHoaModels[${hangHoaCount}].Images" 
        accept="image/*" 
        multiple 
        onchange="validateAndPreviewImages(this, ${hangHoaCount})">
    <div 
        id="imagePreviews_${hangHoaCount}" 
        class="image-previews" 
        style="display: flex; gap: 5px; margin-top: 10px;">
    </div>
</td>
            <td><input type="number" class="form-control" name="hangHoaModels[${hangHoaCount}].DonGiaTruocThue" min="0" required oninput="calculateTotals(this.closest('tr'))"></td>
            <td><input type="number" class="form-control" name="hangHoaModels[${hangHoaCount}].VAT" min="0" max="10" required oninput="calculateTotals(this.closest('tr'))"></td>
            <td><input type="text" class="form-control" name="hangHoaModels[${hangHoaCount}].DonGiaSauThue" readonly></td>
            <td><input type="text" class="form-control" name="hangHoaModels[${hangHoaCount}].TongGiaTruocThue" readonly></td>
            <td><input type="text" class="form-control" name="hangHoaModels[${hangHoaCount}].TongGiaSauThue" readonly></td>
<td><button type="button" class="btn btn-danger btn-sm remove-row">X</button></td>        
        `;

        tableBody.appendChild(newRow);
        hangHoaCount++; // Increment row counter for the next addition
        setupRow(newRow); // Attach event listeners for the new row


newRow.querySelector('.remove-row').addEventListener('click', function() {
            tableBody.removeChild(newRow);
        });
    });

// Add remove buttons to existing rows
    document.querySelectorAll('#hangHoaTableBody tr').forEach(row => {
        const removeButton = document.createElement('td');
        removeButton.innerHTML = '<button type="button" class="btn btn-danger btn-sm remove-row">X</button>';
        row.appendChild(removeButton);

        removeButton.querySelector('.remove-row').addEventListener('click', function() {
            row.parentNode.removeChild(row);
        });
    });

    // Set up event listeners for dynamically added rows
    function setupRow(row) {
        row.querySelector('input[name*="SoLuong"]').addEventListener('input', () => calculateTotals(row));
        row.querySelector('input[name*="DonGiaTruocThue"]').addEventListener('input', () => calculateTotals(row));
        row.querySelector('input[name*="VAT"]').addEventListener('input', () => calculateTotals(row));
    }

    // Calculate totals dynamically
    function calculateTotals(row) {
        const qty = parseFloat(row.querySelector('input[name*="SoLuong"]').value) || 0;
        const priceBeforeTax = parseFloat(row.querySelector('input[name*="DonGiaTruocThue"]').value) || 0;
        const vat = parseFloat(row.querySelector('input[name*="VAT"]').value) || 0;

        const priceAfterTax = priceBeforeTax * (1 + vat / 100);
        const totalBeforeTax = qty * priceBeforeTax;
        const totalAfterTax = qty * priceAfterTax;

        row.querySelector('input[name*="DonGiaSauThue"]').value = priceAfterTax.toFixed(0);
        row.querySelector('input[name*="TongGiaTruocThue"]').value = totalBeforeTax.toFixed(0);
        row.querySelector('input[name*="TongGiaSauThue"]').value = totalAfterTax.toFixed(0);

        updateTotalAmount();
        updateTotal();
    }

    function updateTotalAmount() {
        let totalAmount = 0;
        document.querySelectorAll('.custom-table tbody tr').forEach(row => {
            const totalRow = parseFloat(row.querySelector('input[name*="TongGiaTruocThue"]').value) || 0;
            totalAmount += totalRow;
        });
        document.getElementById('ThanhTien').value = totalAmount.toFixed(0);
    }

    function updateTotal() {
        let totalAmount = 0;
        document.querySelectorAll('.custom-table tbody tr').forEach(row => {
            const totalRow = parseFloat(row.querySelector('input[name*="TongGiaSauThue"]').value) || 0;
            totalAmount += totalRow;
        });
        document.getElementById('TongTien').value = totalAmount.toFixed(0);
    }

    function previewImage(input, index, imageNumber) {
        const preview = document.getElementById(`imagePreview_${index}_${imageNumber}`);
        if (input.files && input.files[0]) {
            const reader = new FileReader();
            reader.onload = e => {
                preview.src = e.target.result;
                preview.style.display = 'block';
            };
            reader.readAsDataURL(input.files[0]);
        } else {
            preview.src = "#";
            preview.style.display = 'none';
        }
    }

    function validateAndPreviewImages(input, rowIndex) {
        const maxFiles = 3; // Maximum allowed files
        const files = Array.from(input.files); // Convert FileList to Array

        if (files.length > maxFiles) {
            alert(`Chỉ được tải lên tối đa ${maxFiles} ảnh.`);
            input.value = ""; // Reset the input
            return;
        }

        const previewContainer = document.getElementById(`imagePreviews_${rowIndex}`);
        previewContainer.innerHTML = ""; // Clear previous previews

        files.forEach((file, fileIndex) => {
            const reader = new FileReader();

            reader.onload = e => {
                // Create an image container with a remove button
                const imgContainer = document.createElement("div");
                imgContainer.style.display = "inline-block";
                imgContainer.style.position = "relative";
                imgContainer.style.marginRight = "10px";

                const img = document.createElement("img");
                img.src = e.target.result;
                img.style.maxWidth = "100px";
                img.style.maxHeight = "100px";
                img.style.objectFit = "cover";
                imgContainer.appendChild(img);

                // Create a remove button
                const removeBtn = document.createElement("button");
                removeBtn.textContent = "X";
                removeBtn.style.position = "absolute";
                removeBtn.style.top = "5px";
                removeBtn.style.right = "5px";
                removeBtn.style.backgroundColor = "red";
                removeBtn.style.color = "white";
                removeBtn.style.border = "none";
                removeBtn.style.borderRadius = "50%";
                removeBtn.style.width = "20px";
                removeBtn.style.height = "20px";
                removeBtn.style.cursor = "pointer";
                removeBtn.style.fontSize = "12px";

                removeBtn.addEventListener("click", () => {
                    files.splice(fileIndex, 1); // Remove the file from the array
                    const newFileList = new DataTransfer(); // Create a new DataTransfer object
                    files.forEach(file => newFileList.items.add(file)); // Add remaining files to DataTransfer
                    input.files = newFileList.files; // Update the input's FileList
                    validateAndPreviewImages(input, rowIndex); // Re-render previews
                });

                imgContainer.appendChild(removeBtn);
                previewContainer.appendChild(imgContainer);
            };

            reader.readAsDataURL(file); // Read the file as Data URL
        });
    }
    console.log(`File read successfully: ${e.target.result}`);
</script>